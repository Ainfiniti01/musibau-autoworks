{"version":3,"file":"static/js/572.73e0783e.chunk.js","mappings":"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","sources":["pages/customer/RegistrationPage.js","utils/guestActivity.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate\r\nimport { getGuestActivities, clearGuestActivities } from '../../utils/guestActivity'; // Import guest activity utilities\r\n\r\nconst RegistrationPage = () => {\r\n  const [accountType, setAccountType] = useState('customer');\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    'confirm-password': '',\r\n    companyName: '',\r\n    rcNumber: '',\r\n    contactPerson: '',\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n  const handleAccountTypeChange = (event) => {\r\n    setAccountType(event.target.value);\r\n    // Clear organization-specific fields if switching to customer\r\n    if (event.target.value === 'customer') {\r\n      setFormData((prevData) => ({\r\n        ...prevData,\r\n        companyName: '',\r\n        rcNumber: '',\r\n        contactPerson: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const validateForm = (data) => {\r\n    const newErrors = {};\r\n    if (!data.name) newErrors.name = 'Name is required';\r\n    if (!data.email) {\r\n      newErrors.email = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(data.email)) {\r\n      newErrors.email = 'Email address is invalid';\r\n    }\r\n    if (!data.password) newErrors.password = 'Password is required';\r\n    if (data.password !== data['confirm-password']) newErrors['confirm-password'] = 'Passwords do not match';\r\n\r\n    if (accountType === 'organization') {\r\n      if (!data.companyName) newErrors.companyName = 'Company Name is required';\r\n      if (!data.rcNumber) newErrors.rcNumber = 'RC Number is required';\r\n      if (!data.contactPerson) newErrors.contactPerson = 'Contact Person is required';\r\n    }\r\n    return newErrors;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const dataToValidate = { ...formData, accountType };\r\n\r\n    const validationErrors = validateForm(dataToValidate);\r\n    setErrors(validationErrors);\r\n\r\n    if (Object.keys(validationErrors).length === 0) {\r\n      console.log('Form submitted:', dataToValidate);\r\n      // Simulate API call\r\n      try {\r\n        // In a real application, you would send dataToValidate to your backend\r\n        // const response = await fetch('/api/register', {\r\n        //   method: 'POST',\r\n        //   headers: { 'Content-Type': 'application/json' },\r\n        //   body: JSON.stringify(dataToValidate),\r\n        // });\r\n        // const result = await response.json();\r\n\r\n        // For demonstration, simulate a successful response\r\n        const simulatedResponse = { status: 201, message: 'Registration successful' };\r\n\r\n        if (simulatedResponse.status === 201) {\r\n          const guestActivities = getGuestActivities(); // Corrected function name\r\n          if (guestActivities.length > 0) {\r\n            console.log('Guest activity found on registration:', guestActivities);\r\n            // In a real app, you would send this guestActivities to your backend\r\n            // to attach it to the newly registered user.\r\n            clearGuestActivities(); // Corrected function name\r\n          }\r\n          navigate('/login'); // Redirect to login page on successful registration\r\n        } else {\r\n          // Handle registration failure (e.g., show error message from backend)\r\n          console.error('Registration failed:', simulatedResponse.message);\r\n          setErrors({ general: simulatedResponse.message });\r\n        }\r\n      } catch (error) {\r\n        console.error('Network error or unexpected issue:', error);\r\n        setErrors({ general: 'An unexpected error occurred. Please try again.' });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <Helmet>\r\n        <title>Musibau AutoWorks - Register</title>\r\n        <meta name=\"description\" content=\"Register for a new Musibau AutoWorks customer account.\" />\r\n      </Helmet>\r\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-md\">\r\n            <h2 className=\"text-center text-3xl font-extrabold text-[#004040]\">Create Your Account</h2>\r\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\r\n          {/* Account Type Selection */}\r\n          <div className=\"flex items-center justify-center space-x-4\">\r\n            <label className=\"inline-flex items-center\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"accountType\"\r\n                value=\"customer\"\r\n                checked={accountType === 'customer'}\r\n                onChange={handleAccountTypeChange}\r\n                className=\"form-radio text-[#ECBE07]\"\r\n                aria-label=\"Personal Account Type\"\r\n              />\r\n              <span className=\"ml-2 text-gray-700\">Personal</span>\r\n            </label>\r\n            <label className=\"inline-flex items-center\">\r\n              <input\r\n                type=\"radio\"\r\n                name=\"accountType\"\r\n                value=\"organization\"\r\n                checked={accountType === 'organization'}\r\n                onChange={handleAccountTypeChange}\r\n                className=\"form-radio text-[#ECBE07]\"\r\n                aria-label=\"Organization Account Type\"\r\n              />\r\n              <span className=\"ml-2 text-gray-700\">Organization</span>\r\n            </label>\r\n          </div>\r\n\r\n          {/* Basic Fields */}\r\n          <div>\r\n            <label htmlFor=\"name\" className=\"sr-only\">Name</label>\r\n            <input\r\n              id=\"name\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              autoComplete=\"name\"\r\n              required\r\n              className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n              placeholder=\"Full Name\"\r\n              aria-label=\"Full Name\"\r\n              value={formData.name}\r\n              onChange={handleChange}\r\n            />\r\n            {errors.name && <p className=\"text-red-500 text-xs italic\">{errors.name}</p>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"email\" className=\"sr-only\">Email address</label>\r\n            <input\r\n              id=\"email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              autoComplete=\"email\"\r\n              required\r\n              className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n              placeholder=\"Email address\"\r\n              aria-label=\"Email Address\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n            />\r\n            {errors.email && <p className=\"text-red-500 text-xs italic\">{errors.email}</p>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\" className=\"sr-only\">Password</label>\r\n            <input\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              required\r\n              className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors.password ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n              placeholder=\"Password\"\r\n              aria-label=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n            />\r\n            {errors.password && <p className=\"text-red-500 text-xs italic\">{errors.password}</p>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"confirm-password\" className=\"sr-only\">Confirm Password</label>\r\n            <input\r\n              id=\"confirm-password\"\r\n              name=\"confirm-password\"\r\n              type=\"password\"\r\n              autoComplete=\"new-password\"\r\n              required\r\n              className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors['confirm-password'] ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n              placeholder=\"Confirm Password\"\r\n              aria-label=\"Confirm Password\"\r\n              value={formData['confirm-password']}\r\n              onChange={handleChange}\r\n            />\r\n            {errors['confirm-password'] && <p className=\"text-red-500 text-xs italic\">{errors['confirm-password']}</p>}\r\n          </div>\r\n\r\n          {/* Conditional organization fields */}\r\n          {accountType === \"organization\" && (\r\n            <>\r\n              <div>\r\n                <label htmlFor=\"companyName\" className=\"sr-only\">Company Name</label>\r\n                <input\r\n                  id=\"companyName\"\r\n                  name=\"companyName\"\r\n                  type=\"text\"\r\n                  autoComplete=\"organization\"\r\n                  required\r\n                  className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors.companyName ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n                  placeholder=\"Company Name\"\r\n                  aria-label=\"Company Name\"\r\n                  value={formData.companyName}\r\n                  onChange={handleChange}\r\n                />\r\n                {errors.companyName && <p className=\"text-red-500 text-xs italic\">{errors.companyName}</p>}\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"rcNumber\" className=\"sr-only\">RC Number</label>\r\n                <input\r\n                  id=\"rcNumber\"\r\n                  name=\"rcNumber\"\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors.rcNumber ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n                  placeholder=\"RC Number\"\r\n                  aria-label=\"RC Number\"\r\n                  value={formData.rcNumber}\r\n                  onChange={handleChange}\r\n                />\r\n                {errors.rcNumber && <p className=\"text-red-500 text-xs italic\">{errors.rcNumber}</p>}\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"contactPerson\" className=\"sr-only\">Contact Person</label>\r\n                <input\r\n                  id=\"contactPerson\"\r\n                  name=\"contactPerson\"\r\n                  type=\"text\"\r\n                  autoComplete=\"name\"\r\n                  required\r\n                  className={`appearance-none rounded-none relative block w-full px-3 py-2 border ${errors.contactPerson ? 'border-red-500' : 'border-gray-300'} placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm`}\r\n                  placeholder=\"Contact Person\"\r\n                  aria-label=\"Contact Person\"\r\n                  value={formData.contactPerson}\r\n                  onChange={handleChange}\r\n                />\r\n                {errors.contactPerson && <p className=\"text-red-500 text-xs italic\">{errors.contactPerson}</p>}\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-[#ECBE07] hover:bg-[#d4a806] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#ECBE07]\"\r\n              aria-label=\"Register Button\"\r\n            >\r\n              Register\r\n            </button>\r\n            <p className=\"text-center text-sm text-gray-600 mt-4\">\r\n              Already have an account? <a href=\"/login\" className=\"text-[#ECBE07] hover:underline\">Login</a>\r\n            </p>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","// frontend/src/utils/guestActivity.js\r\n\r\nconst GUEST_ACTIVITY_KEY = 'guestActivity';\r\n\r\n/**\r\n * Retrieves all guest activities from local storage.\r\n * @returns {Array} An array of guest activity objects.\r\n */\r\nexport const getGuestActivities = () => {\r\n  try {\r\n    const activities = localStorage.getItem(GUEST_ACTIVITY_KEY);\r\n    return activities ? JSON.parse(activities) : [];\r\n  } catch (error) {\r\n    console.error(\"Error retrieving guest activities from local storage:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a new guest activity to local storage.\r\n * @param {object} activity - The guest activity object to add.\r\n */\r\nexport const addGuestActivity = (activity) => {\r\n  try {\r\n    const activities = getGuestActivities();\r\n    activities.push({ ...activity, timestamp: new Date().toISOString() });\r\n    localStorage.setItem(GUEST_ACTIVITY_KEY, JSON.stringify(activities));\r\n  } catch (error) {\r\n    console.error(\"Error adding guest activity to local storage:\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Clears all guest activities from local storage.\r\n */\r\nexport const clearGuestActivities = () => {\r\n  try {\r\n    localStorage.removeItem(GUEST_ACTIVITY_KEY);\r\n  } catch (error) {\r\n    console.error(\"Error clearing guest activities from local storage:\", error);\r\n  }\r\n};\r\n\r\n/**\r\n * Example guest data structure:\r\n * {\r\n *   type: 'booking', // or 'product_view', 'inquiry', etc.\r\n *   details: {\r\n *     service: 'Tire Repair',\r\n *     date: '2025-08-10',\r\n *     // other relevant details\r\n *   },\r\n *   timestamp: '2025-08-08T12:00:00.000Z'\r\n * }\r\n */\r\n"],"names":["RegistrationPage","accountType","setAccountType","useState","formData","setFormData","name","email","password","companyName","rcNumber","contactPerson","errors","setErrors","navigate","useNavigate","handleAccountTypeChange","event","target","value","prevData","handleChange","e","_jsxs","className","children","Helmet","_jsx","content","onSubmit","async","preventDefault","dataToValidate","validationErrors","data","newErrors","test","validateForm","Object","keys","length","console","log","simulatedResponse","status","message","guestActivities","getGuestActivities","clearGuestActivities","error","general","type","checked","onChange","htmlFor","id","autoComplete","required","placeholder","_Fragment","href","GUEST_ACTIVITY_KEY","activities","localStorage","getItem","JSON","parse","addGuestActivity","activity","push","timestamp","Date","toISOString","setItem","stringify","removeItem"],"sourceRoot":""}